var searchIndex = {};
searchIndex["serde_pickle"] = {"doc":"Serialization and deserialization for Python's pickle format","items":[[5,"to_value","serde_pickle","Serialize any serde serializable object into a `value::Value`.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Deserialize a `value::Value` from any serde deserializable object.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[0,"ser","","Pickle serialization",null,null],[3,"Serializer","serde_pickle::ser","A structure for serializing Rust values into a Pickle stream.",null,null],[3,"Compound","","",null,null],[5,"value_to_writer","","Encode the value into a pickle stream.",null,{"inputs":[{"name":"w"},{"name":"value"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"bool"}],"output":{"name":"result"}}],[5,"value_to_vec","","Encode the value into a `Vec<u8>` buffer.",null,{"inputs":[{"name":"value"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a `Vec<u8>` buffer.",null,{"inputs":[{"name":"t"},{"name":"bool"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"w"},{"name":"bool"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",0,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"serialize_element","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",1,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde_pickle","Pickle deserialization",null,null],[3,"Deserializer","serde_pickle::de","Decodes pickle streams into values.",null,null],[5,"from_reader","","Decodes a value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a value from a byte slice `&[u8]`.",null,null],[5,"from_iter","","Decodes a value from any iterator supported as a reader.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"value_from_reader","","Decodes a value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"value_from_slice","","Decodes a value from a byte slice `&[u8]`.",null,null],[5,"value_from_iter","","Decodes a value from any iterator supported as a reader.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"new","","Construct a new Deserializer.  The second argument decides whether strings (STRING opcodes, saved only by protocols 0-2) are decoded as UTF-8 strings or left as byte vectors.",2,{"inputs":[{"name":"r"},{"name":"bool"}],"output":{"name":"deserializer"}}],[11,"end","","Assert that we reached the end of the stream.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"error","serde_pickle","Error objects and codes",null,null],[4,"ErrorCode","serde_pickle::error","",null,null],[13,"Unsupported","","Unsupported opcode",3,null],[13,"EOFWhileParsing","","EOF while parsing op argument",3,null],[13,"StackUnderflow","","Stack underflowed",3,null],[13,"NegativeLength","","Length prefix found negative",3,null],[13,"StringNotUTF8","","String decoding as UTF-8 failed",3,null],[13,"InvalidStackTop","","Wrong stack top type for opcode",3,null],[13,"ValueNotHashable","","Value not hashable, but used as dict key or set item",3,null],[13,"Recursive","","Recursive structure found, which we don't support",3,null],[13,"UnresolvedGlobal","","A \"module global\" reference wasn't resolved by REDUCE",3,null],[13,"UnsupportedGlobal","","A \"module global\" isn't supported",3,null],[13,"MissingMemo","","A value was missing from the memo",3,null],[13,"InvalidLiteral","","Invalid literal found",3,null],[13,"TrailingBytes","","Found trailing bytes after STOP opcode",3,null],[13,"InvalidValue","","Invalid value in pickle stream",3,null],[13,"Structure","","Structure deserialization error (e.g., unknown variant)",3,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a value.",null,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",4,null],[13,"Eval","","The pickle had some error while interpreting.",4,null],[13,"Syntax","","Syntax error while transforming into Rust values.",4,null],[6,"Result","","",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"value","serde_pickle","Python values, and serialization instances for them.",null,null],[4,"Value","serde_pickle::value","Represents all primitive builtin Python values that can be restored by unpickling.",null,null],[13,"None","","None",5,null],[13,"Bool","","Boolean",5,null],[13,"I64","","Short integer",5,null],[13,"Int","","Long integer (unbounded length)",5,null],[13,"F64","","Float",5,null],[13,"Bytes","","Bytestring",5,null],[13,"String","","Unicode string",5,null],[13,"List","","List",5,null],[13,"Tuple","","Tuple",5,null],[13,"Set","","Set",5,null],[13,"FrozenSet","","Frozen (immutable) set",5,null],[13,"Dict","","Dictionary (map)",5,null],[4,"HashableValue","","Represents all primitive builtin Python values that can be contained in a \"hashable\" context (i.e., as dictionary keys and set elements).",null,null],[13,"None","","None",6,null],[13,"Bool","","Boolean",6,null],[13,"I64","","Short integer",6,null],[13,"Int","","Long integer",6,null],[13,"F64","","Float",6,null],[13,"Bytes","","Bytestring",6,null],[13,"String","","Unicode string",6,null],[13,"Tuple","","Tuple",6,null],[13,"FrozenSet","","Frozen (immutable) set",6,null],[5,"to_value","","Serialize any serde serializable object into a `value::Value`.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Deserialize a `value::Value` from any serde deserializable object.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"hashablevalue"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_hashable","","Convert the value into a hashable version, if possible.  If not, return a ValueNotHashable error.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_value","","Convert the value into its non-hashable version.  This always works.",6,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"hashablevalue"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"hashablevalue"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"hashablevalue"}],"output":{"name":"ordering"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"stdresult"}}]],"paths":[[3,"Serializer"],[3,"Compound"],[3,"Deserializer"],[4,"ErrorCode"],[4,"Error"],[4,"Value"],[4,"HashableValue"]]};
initSearch(searchIndex);
