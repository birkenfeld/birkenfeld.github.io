var searchIndex = {};
searchIndex["iter_read"] = {"doc":"A small crate that provides an adapter to Read from an iterator over bytes.\nThis is useful if you want to use an API that takes a `Read` instance, but\nwant to feed it data from an iterator.","items":[[3,"IterRead","iter_read","An adapter that allows treating iterators of bytes (and other types that\nimplement `IterReadItem`) as a `Read`.",null,null],[11,"read","collections::vec","",0,null],[11,"read","collections::string","",1,null],[11,"read","core::result","",2,null],[11,"read","","",2,null],[11,"read","","",2,null],[11,"read","","",2,null],[11,"read","","",2,null],[11,"read","","",2,null],[11,"read","","",2,null],[11,"read","","",2,null],[8,"IterReadItem","iter_read","Trait that should be implemented for any type which can be used in an\niterator given to `IterRead`.",null,null],[16,"Buffer","","Represents the type of buffer that the adapter will use.\nCan be `()` if no buffer is required.",3,null],[10,"read","","Implements `Read::read()` for the specific type Self.",3,null],[11,"new","","Create a new `IterRead` which will read from the specified `Iterator`.",4,{"inputs":[{"name":"i"}],"output":{"name":"iterread"}}],[11,"into_inner","","Unwrap the inner iterator.  If the adapter uses buffering, the contents\nof the buffer are lost.",4,{"inputs":[{"name":"iterread"}],"output":{"name":"i"}}],[11,"read","","",4,null]],"paths":[[3,"Vec"],[3,"String"],[4,"Result"],[8,"IterReadItem"],[3,"IterRead"]]};
initSearch(searchIndex);
